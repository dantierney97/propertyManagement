const request = require("supertest");  // Library to send HTTP requests for testing
const express = require("express");    // Express framework to simulate the server
const mongoose = require("mongoose");  // MongoDB connection handler
const MaintenanceRequest = require("../models/maintenanceRequest");  // Import Mongoose schema
const maintenanceRoutes = require("../routes/maintenanceRoutes");  // Import maintenance request routes

// Create an Express application instance for testing
const app = express();
app.use(express.json()); // Middleware to parse JSON request bodies
app.use("/api/maintenance", maintenanceRoutes); // Load maintenance routes

// Variable to store the ID of a test maintenance request for use in test cases
let testRequestId;

/**
 * Establishes a database connection before any tests run.
 */
beforeAll(async () => {
    await mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true });
});

/**
 * Inserts a test maintenance request before each test.
 * This ensures that there is always a request available for operations such as retrieval, updates, and deletion.
 */
beforeEach(async () => {
    const testRequest = await MaintenanceRequest.create({
        property_id: "PROP_TEST",
        tenant_id: "TENANT_TEST",
        description: "Test maintenance issue",
        status: "Open",
        assigned_to: null,
    });

    // Store the request ID for use in subsequent test cases
    testRequestId = testRequest._id.toString();
});

/**
 * Cleans up by deleting the test maintenance request after each test.
 * This prevents test data from accumulating and affecting future tests.
 */
afterEach(async () => {
    await MaintenanceRequest.findByIdAndDelete(testRequestId);
});

/**
 * Closes the database connection after all tests have been executed.
 */
afterAll(async () => {
    await mongoose.disconnect();
});

/**
 * Function containing all unit tests for the maintenance request API.
 */
const testMaintenanceRequests = () => {
    describe("Maintenance Request API Tests", () => {
        
        /**
         * Tests the creation of a new maintenance request.
         * Verifies that the request is created successfully and a valid response is returned.
         */
        test("Create a new maintenance request", async () => {
            const response = await request(app)
                .post("/api/maintenance/create")
                .send({
                    property_id: "PROP_NEW",
                    tenant_id: "TENANT_NEW",
                    description: "New test issue"
                });

            expect(response.status).toBe(201);
            expect(response.body.message).toBe("Maintenance request created successfully!");
            expect(response.body.request).toHaveProperty("_id");
        });

        /**
         * Tests the deletion of an existing maintenance request.
         * Ensures that the request is deleted and cannot be found afterward.
         */
        test("Delete a maintenance request", async () => {
            const response = await request(app)
                .post("/api/maintenance/deleteMaintenanceRequest")
                .send({ request_id: testRequestId });

            expect(response.status).toBe(200);
            expect(response.body.message).toBe("Maintenance Request deleted successfully!");

            // Verify that the request was successfully removed from the database
            const deletedRequest = await MaintenanceRequest.findById(testRequestId);
            expect(deletedRequest).toBeNull();
        });

        /**
         * Tests the ability to add an update to a maintenance request.
         * Verifies that the update is recorded correctly in the database.
         */
        test("Add an update to a maintenance request", async () => {
            const response = await request(app)
                .put("/api/maintenance/update")
                .send({
                    request_id: testRequestId,
                    updated_by: "Admin",
                    description: "Issue being resolved"
                });

            expect(response.status).toBe(200);
            expect(response.body.message).toBe("Maintenance request updated successfully!");
            expect(response.body.request.updates.length).toBeGreaterThan(0);
        });

        /**
         * Tests the assignment of a contractor to a maintenance request.
         * Ensures that the contractor ID is properly updated in the database.
         */
        test("Assign a contractor to a maintenance request", async () => {
            const response = await request(app)
                .put("/api/maintenance/assignContractor")
                .send({
                    request_id: testRequestId,
                    contractor_id: "CONTRACTOR_001"
                });

            expect(response.status).toBe(200);
            expect(response.body.message).toBe("Request assigned successfully!");
            expect(response.body.request.assigned_to).toBe("CONTRACTOR_001");
        });

        /**
         * Tests the retrieval of maintenance requests by property.
         * Ensures that the response includes only requests related to the specified property ID.
         */
        test("Retrieve maintenance requests by property", async () => {
            const response = await request(app)
                .post("/api/maintenance/getRequestsByProperty")
                .send({
                    property_id: "PROP_TEST"
                });

            expect(response.status).toBe(200);
            expect(response.body.requests.length).toBeGreaterThan(0);
            expect(response.body.requests[0].property_id).toBe("PROP_TEST");
        });

    });
};

// Export function for use in test.js
module.exports = testMaintenanceRequests;